
import gimnasia.*

describe "rutinas" {

//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad = 1.2)
	const remarEnElDelta = new Remo(intensidad=1.3)
	const remarEnCaminoRemeros = new RemoDeCompetision(intensidad=1.7)
	const maratonBA = new Maraton(intensidad=1.5)

//Punto 2: personas
	//const calamardo = //Una persona Sedentaria con peso 60 y tiempo de ejercicio 5
	const calamardo = new PersonaSedentaria(peso=60,tiempo=5)
 	//const bob =  // Una persona atleta con peso 40 
	const bob = new PersonaAtleta(peso = 40)

//Punto 3: clubes
	//const recreo = //un predio con correrEnLaPlaya y maratonBA
	const recreo = new Predio(rutinasPredio=[correrEnLaPlaya,maratonBA])
	//const nautico = //un predio con remarEnElDelta y remarEnCaminoRemeros
	const nautico = new Predio(rutinasPredio=#{remarEnElDelta,remarEnCaminoRemeros})
	//const clubBarrial = //un club con recreo y nautico
	const clubBarrial = new Club(predios=#{recreo,nautico})
//	
//
// PUNTO 1
	test "1.1 consulta running" {
		//correrEnLaPlaya deberia gastar 360 calorias al practicarse por 5 minutos
		//correrEnLaPlaya deberia gastar 10200 calorias al practicarse por 90 minutos
		assert.equals(360,correrEnLaPlaya.caloriasQueQuema(5))
		assert.equals(10200,correrEnLaPlaya.caloriasQueQuema(90))
	}

	test "1.2 consulta maraton" {
		//maratonBA deberia gastar 900 calorias al practicarse por 5 minutos
		//maratonBA deberia gastar 25500 calorias al practicarse por 90 minutos
		assert.equals(900,maratonBA.caloriasQueQuema(5))
		assert.equals(25500,maratonBA.caloriasQueQuema(90))

	}

	test "1.3 consulta remo" {
		//remarEnElDelta deberia gastar 520 calorias al practicarse por 5 minutos
		//remarEnElDelta deberia gastar 9360 calorias al practicarse por 90 minutos
		assert.equals(520,remarEnElDelta.caloriasQueQuema(5))
		assert.equals(9360,remarEnElDelta.caloriasQueQuema(90))
	}

	test "1.4 consulta remo competitivo" {
		//remarEnCaminoRemeros deberia gastar 510 calorias al practicarse por 5 minutos
		//remarEnCaminoRemeros deberia gastar 12750 calorias al practicarse por 90 minutos
		assert.equals(510,remarEnCaminoRemeros.caloriasQueQuema(5))
		assert.equals(12750,remarEnCaminoRemeros.caloriasQueQuema(90))
	}

//Punto 2: Personas
//	ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
//	Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test '2.1.1 test sedentario running' {
		// hacer que calamardo practique correrEnLaPlaya
		// el peso de calamardo debería ser 59.948 (truncado a 3 decimales)
		calamardo.aplicarRutina(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
	} 
	
	test '2.1.2 test sedentario maraton' {
		// hacer que calamardo practique maratonBA
		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
		calamardo.aplicarRutina(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))

	} 

	test '2.1.3 test sedentario remo' {
		// hacer que calamardo practique remarEnElDelta
		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
		calamardo.aplicarRutina(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo competicion' {
		// hacer que calamardo practique remarEnCaminoRemeros
		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
		calamardo.aplicarRutina(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	} 
	
	test '2.1.5 test sedentario no puede practicar' {
		// Hacer que el peso de calamardo sea 40
		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
		// el peso de calamardo debería ser 40 
		calamardo.peso(40)
		assert.throwsException({calamardo.aplicarRutina(correrEnLaPlaya)})
		assert.equals(40,calamardo.peso())
	} 
	
	test "2.2.1 test atleta running" {
		// hacer que bob practique correrEnLaPlaya
		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
		bob.aplicarRutina(correrEnLaPlaya)
		assert.equals(39.725,bob.peso().truncate(3))
		//assert.that(bob.puedoEntrenar(correrEnLaPlaya))
	 }

	test "2.2.2 test atleta maraton" {
		// hacer que bob practique maratonBA
		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
		bob.aplicarRutina(maratonBA)
		assert.equals(37.812,bob.peso().truncate(3))
		//assert.that(bob.puedoEntrenar(maratonBA))
	 }

	test "2.2.3 test atleta remo" {
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		// el peso de bob debería ser 40 
		assert.throwsException({bob.aplicarRutina(remarEnElDelta)})
		assert.equals(40,bob.peso())
	}

	test "2.2.3 test atleta remo de competición" {
		// hacer que bob practique remarEnCaminoRemeros
		// el peso de bob debería ser 39.406
		bob.aplicarRutina(remarEnCaminoRemeros)
		assert.equals(39.406,bob.peso().truncate(3))
	}
	
//punto 3: Consultas
	test "3.1 el mejor predio" {
		//El mejor predio del clubBarrial para bob debería ser recreo		
		//El mejor predio del clubBarrial para calamardo debería ser recreo		
		assert.equals(recreo,clubBarrial.elMejorPredioPara(bob))
		assert.equals(recreo,clubBarrial.elMejorPredioPara(calamardo))

	}	
	
	test "3.2 predios tranquis" {
		//No debería haber predios tranquis en el clubBarrial para bob
		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
		assert.equals(#{},clubBarrial.prediosTranquis(bob))
		assert.equals(#{recreo},clubBarrial.prediosTranquis(calamardo))
		//assert.equals(1,bob.cuantoPesoPierdo())

	}
	
	test "3.3 rutinas más exigentes" {
		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
		assert.equals(#{maratonBA,remarEnCaminoRemeros},clubBarrial.rutinasMasExigentes(bob))
		assert.equals(#{maratonBA,remarEnElDelta},clubBarrial.rutinasMasExigentes(calamardo))

	}
	
}